When an app doesn’t expose an admin reset and insists on a login → TOTP → change-password workflow, you can still automate by generating the RFC 6238 TOTP from the shared seed and posting it as the second factor. Drop this helper where needed:

function Convert-Base32ToBytes {
  param([string]$Base32)
  $alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
  $clean = ($Base32 -replace '\s','').ToUpper()
  $bitBuffer = 0; $bitCount = 0; $bytes = New-Object System.Collections.Generic.List[byte]
  foreach ($ch in $clean.ToCharArray()) {
    if ($ch -eq '=') { break }
    $val = $alphabet.IndexOf($ch); if ($val -lt 0) { throw "Invalid Base32 char: $ch" }
    $bitBuffer = ($bitBuffer -shl 5) -bor $val; $bitCount += 5
    while ($bitCount -ge 8) { $bitCount -= 8; $bytes.Add([byte](($bitBuffer -shr $bitCount) -band 0xFF)) | Out-Null }
  }
  ,$bytes.ToArray()
}

function Get-TotpCode {
  param([Parameter(Mandatory)] [string]$Base32Secret, [int]$Digits=6, [int]$Period=30)
  $key = Convert-Base32ToBytes $Base32Secret
  $counter = [BitConverter]::GetBytes([Int64][math]::Floor(([DateTimeOffset](Get-Date)).ToUnixTimeSeconds() / $Period))
  if ([BitConverter]::IsLittleEndian) { [Array]::Reverse($counter) }
  $hmac = New-Object System.Security.Cryptography.HMACSHA1; $hmac.Key = $key
  $hash = $hmac.ComputeHash($counter)
  $o = $hash[-1] -band 0x0F
  $bin = ((($hash[$o] -band 0x7F) -shl 24) -bor (($hash[$o+1] -band 0xFF) -shl 16) -bor (($hash[$o+2] -band 0xFF) -shl 8) -bor ($hash[$o+3] -band 0xFF))
  ($bin % [math]::Pow(10,$Digits)).ToString("D{0}" -f $Digits)
}
